{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["themeColor","dark","bgColor","color","light","teal","orange","blue","Navbar","props","useState","preferredMode","setPreferredMode","handleChange","colorProp","document","body","style","backgroundColor","useEffect","mode","id","className","href","title","type","onClick","event","toggle","role","htmlFor","TextForm","text","setText","split","length","totalWords","heading","value","onChange","target","rows","disabled","newText","toUpperCase","showAlert","toLowerCase","wordArray","i","code","charCodeAt","String","fromCharCode","j","arrayCode","filter","element","Math","floor","defaultProps","aboutText","Alert","word","height","alert","charAt","slice","message","App","setMode","setAlert","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ca49edf7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//import { Link } from \"react-router-dom\";\r\n\r\nconst themeColor = {\r\n  dark: {\r\n    bgColor: \"rgba(33,37,41,1)\",\r\n    color: \"white\",\r\n  },\r\n  light: {\r\n    bgColor: \"rgba(248,249,250,1)\",\r\n    color: \"black\",\r\n  },\r\n  teal: {\r\n    bgColor: \"#993441\",\r\n    color: \"black\",\r\n  },\r\n  orange: {\r\n    bgColor: \"#fb3433\",\r\n    color: \"white\",\r\n  },\r\n  blue: {\r\n    bgColor: \"#5e001f\",\r\n    color: \"white\",\r\n  },\r\n};\r\n\r\nexport default function Navbar(props) {\r\n  const [preferredMode, setPreferredMode] = useState(\"\");\r\n  function handleChange(colorProp) {\r\n    setPreferredMode(colorProp);\r\n    if (colorProp === \"teal\") {\r\n      document.body.style.backgroundColor = \"#ffa781\";\r\n    } else if (colorProp === \"orange\") {\r\n      document.body.style.backgroundColor = \"#e9bbba\";\r\n    } else if (colorProp === \"blue\") {\r\n      document.body.style.backgroundColor = \"#00e1d9\";\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setPreferredMode(\"\");\r\n  }, [props.mode]);\r\n  return (\r\n    <nav\r\n      id=\"yo\"\r\n      className=\"navbar navbar-expand-lg\"\r\n      style={{\r\n        backgroundColor: themeColor[preferredMode || props.mode].bgColor,\r\n      }}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a\r\n          className=\"navbar-brand\"\r\n          href=\"#\"\r\n          style={{ color: themeColor[preferredMode || props.mode].color }}\r\n        >\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className=\"nav-link active\"\r\n                aria-current=\"page\"\r\n                href=\"#\"\r\n                style={{ color: themeColor[preferredMode || props.mode].color }}\r\n              >\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/*<li className=\"nav-item\">\r\n              <a\r\n                className=\"nav-link\"\r\n                href=\"#\"\r\n                style={{ color: themeColor[preferredMode || props.mode].color }}\r\n              >\r\n                {props.aboutText}\r\n              </a>\r\n            </li>*/}\r\n          </ul>\r\n          {/*<form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>*/}\r\n\r\n          <div>\r\n            <button\r\n              className=\"pallette-color teal\"\r\n              onClick={(event) => handleChange(\"teal\")}\r\n            ></button>\r\n            <button\r\n              className=\"pallette-color orange\"\r\n              onClick={(event) => handleChange(\"orange\")}\r\n            ></button>\r\n            <button\r\n              className=\"pallette-color blue\"\r\n              onClick={(event) => handleChange(\"blue\")}\r\n            ></button>\r\n          </div>\r\n\r\n          <div\r\n            className=\"form-check form-switch\"\r\n            style={{ color: themeColor[preferredMode || props.mode].color }}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggle}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Enter title here\",\r\n  aboutText: \"About us\",\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"Enter here\");\r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleUpClick = () => {\r\n    //console.log(\"Uppercase button was clicked\");\r\n    //setText(\"You have clicked on handleClick\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text converted to Uppercase\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text converted to Lowercase\", \"success\");\r\n  };\r\n\r\n  const handleCapClick = () => {\r\n    let wordArray = text.split(\" \");\r\n    let newText = \"\";\r\n    for (let i = 0; i < wordArray.length; i++) {\r\n      let code = wordArray[i].charCodeAt(0);\r\n      if (code >= 97 && code <= 122) {\r\n        newText += String.fromCharCode(code - 32);\r\n      } else {\r\n        newText += wordArray[i][0];\r\n      }\r\n\r\n      for (let j = 1; j < wordArray[i].length; j++) {\r\n        let arrayCode = wordArray[i].charCodeAt(j);\r\n        if (arrayCode >= 65 && arrayCode <= 90) {\r\n          newText += String.fromCharCode(arrayCode + 32);\r\n        } else {\r\n          newText += wordArray[i][j];\r\n        }\r\n      }\r\n\r\n      if (i !== wordArray.length - 1) {\r\n        newText += \" \";\r\n      }\r\n    }\r\n\r\n    setText(newText);\r\n    props.showAlert(\"Text converted to Capitalized\", \"success\");\r\n  };\r\n\r\n  const handleAltClick = () => {\r\n    let wordArray = text.split(\" \");\r\n    let newText = \"\";\r\n\r\n    for (let i = 0; i < wordArray.length; i++) {\r\n      for (let j = 0; j < wordArray[i].length; j++) {\r\n        let code = wordArray[i].charCodeAt(j);\r\n\r\n        if (j % 2 === 0) {\r\n          if (code >= 65 && code <= 90) {\r\n            newText += String.fromCharCode(code + 32);\r\n          } else newText += wordArray[i][j];\r\n        } else {\r\n          if (code >= 97 && code <= 122) {\r\n            newText += String.fromCharCode(code - 32);\r\n          } else newText += wordArray[i][j];\r\n        }\r\n      }\r\n\r\n      if (i !== wordArray.length - 1) {\r\n        newText += \" \";\r\n      }\r\n    }\r\n\r\n    setText(newText);\r\n    props.showAlert(\"Text letters alternated\", \"success\");\r\n  };\r\n\r\n  const handleInvClick = () => {\r\n    let wordArray = text.split(\" \");\r\n    let newText = \"\";\r\n\r\n    for (let i = 0; i < wordArray.length; i++) {\r\n      for (let j = 0; j < wordArray[i].length; j++) {\r\n        let code = wordArray[i].charCodeAt(j);\r\n        if (code >= 65 && code <= 90) {\r\n          newText += String.fromCharCode(code + 32);\r\n        } else if (code >= 97 && code <= 122) {\r\n          newText += String.fromCharCode(code - 32);\r\n        } else newText += wordArray[i][j];\r\n      }\r\n\r\n      if (i !== wordArray.length - 1) {\r\n        newText += \" \";\r\n      }\r\n    }\r\n\r\n    setText(newText);\r\n    props.showAlert(\"Text letters inverted\", \"success\");\r\n  };\r\n\r\n  let totalWords = text.split(\" \").length;\r\n  if (text.length === 0) totalWords = 0;\r\n  else if (text[text.length - 1] === \" \") {\r\n    totalWords--;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"text-form\"\r\n            value={text}\r\n            onChange={handleChange}\r\n            rows=\"8\"\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"#64af9e\",\r\n              color: props.mode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleUpClick}\r\n        >\r\n          UPPERCASE\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleLoClick}\r\n        >\r\n          lowercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleCapClick}\r\n        >\r\n          Capitalised Case\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleAltClick}\r\n        >\r\n          aLtErNaTiNg cAsE\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleInvClick}\r\n        >\r\n          Inverse Case\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          {\r\n            text.split(\" \").filter((element) => {\r\n              return element.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} letters\r\n        </p>\r\n        <p>\r\n          {Math.floor(\r\n            text.split(\" \").filter((element) => {\r\n              return element.length !== 0;\r\n            }).length / 125\r\n          )}{\" \"}\r\n          Minutes{\" \"}\r\n          {Math.floor(\r\n            ((text.split(\" \").filter((element) => {\r\n              return element.length !== 0;\r\n            }).length %\r\n              125) *\r\n              60) /\r\n              125\r\n          )}{\" \"}\r\n          sec read\r\n        </p>\r\n        <h3>Preview</h3>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter something in textarea above to appear here.\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTextForm.propTypes = {\r\n  heading: PropTypes.string,\r\n};\r\n\r\nTextForm.defaultProps = {\r\n  heading: \"Enter the text here\",\r\n};\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    let text = word.toLowerCase();\r\n    return text.charAt(0).toUpperCase() + word.slice(1);\r\n  };\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alert && (\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          {capitalize(props.alert.type)}: {props.alert.message}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\n//import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport React, { useState } from \"react\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n//import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    //  console.log(asdf);\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode is enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode is enabled\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      {/*<Router>*/}\n      <Navbar title=\"BigFoot\" mode={mode} toggle={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/*/user\n\t\t  /user/about\n\t\t  will render same i.e /user if exact path is not used*/}\n        {/*<Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the Text\"\n                mode={mode}\n              />\n            </Route>\n          </Switch>*/}\n        <TextForm showAlert={showAlert} heading=\"Enter the Text\" mode={mode} />\n      </div>\n      {/*</Router>*/}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}